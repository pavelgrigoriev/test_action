name: CMake on a single platform
run-name: ${{ github.actor }} is testing out GitHub Actions
# on:
#   push:
#     branches: [ "main"]
#   pull_request:
#     branches: [ "main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  install:
    name: Install dependesies
    runs-on: ubuntu-22.04
    # strategy:
    #   matrix:
    #     os: [ubuntu-22.4.0]
    #     qt_ver: [6.2.2]
    #     qt_arch: [gcc_64]
    # env:
    #   targetName: OptiSiftVision
    #   QtApplicationName: App
    # steps:
    #   - uses: actions/setup-python@v3
    #     with:
    #       python-version: "3.10"
    #       # cache: "poetry"
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.2.2'
          host: 'linux'
          target: 'desktop'
          # dir: '${{ github.Qt6_DIR }}'
          # install-deps: 'true'
          # cache: 'false'
          # cache-key-prefix: 'install-qt-action'
          # setup-python: 'false'
          # set-env: 'true'
          # tools-only: 'false'
          # modules: "qtcharts qtnetworkauth"
        # run: sudo apt install qt6-base-dev
      - name: Check install QT
        run: find ${{env.QT_DIR}}
      - name: Check install Qt6
        run: find ${{env.Qt6_DIR}}
      # - name: Checkout intalation
        # run: actions/checkout@v3
      - name: Update and install
        run: |
          sudo apt-get update -qq
          sudo apt-get install clang
  build:
    needs: install
    name: Compleate build app
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # env:
        # CMAKE_PREFIX_PATH: ${{env.Qt6_Dir}}
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} #-DCMAKE_PREFIX_PATH=${{github.Qt6_DIR}}/Qt/6.2.2/gcc_64/lib/cmake -DCMAKE_PREFIX_PATH:STRING=${{github.Qt6_DIR}}/Qt/6.2.2/gcc_64 -DCMAKE_C_COMPILER:STRING=/usr/bin/gcc -DCMAKE_CXX_COMPILER:STRING=/usr/bin/g++ .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
      # working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
